{"version":3,"sources":["services/User.ts","services/twitterCloneService.ts","app.ts","environment.ts","main.ts","resources/index.ts","viewmodels/headerMenu/headerMenu.ts","/Users/florianfritz/Documents/projects/nodejs/twitter-clone-spa/node_modules/querystring/decode.js","/Users/florianfritz/Documents/projects/nodejs/twitter-clone-spa/node_modules/querystring/encode.js","/Users/florianfritz/Documents/projects/nodejs/twitter-clone-spa/src/app.html","/Users/florianfritz/Documents/projects/nodejs/twitter-clone-spa/src/viewmodels/headerMenu/headerMenu.html"],"names":[],"mappings":"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AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClEA;ACAA","file":"app-bundle.js","sourcesContent":["import * as gravatar from \"gravatar\";\n\nexport class User {\n  firstName: string;\n  lastName: string;\n  email: string;\n  scope: string[];\n\n  constructor(firstName:string, lastName:string, email:string, scope:string[]) {\n    this.firstName = firstName;\n    this.lastName = lastName;\n    this.email = email;\n    this.scope = scope;\n  }\n\n  fullName():string {\n    return this.firstName + \" \" + this.lastName;\n  }\n\n  isAdmin():boolean {\n    for (let role of this.scope) {\n      if (role == \"admin\")\n        return true;\n    }\n\n    return false;\n  }\n\n  gravatar():string {\n    return gravatar.url(this.email);\n  }\n}\n","import {User} from \"./User\";\n\nexport class TwitterCloneService {\n  currentUser: User;\n\n  constructor() {\n    this.currentUser = new User(\"Test\", \"User\", \"test@test.com\", []);\n  }\n\n  isAuthenticated(): boolean {\n    return true;\n  }\n}\n","import {autoinject} from \"aurelia-framework\";\nimport {Router} from \"aurelia-router\";\nimport {TwitterCloneService} from \"./services/twitterCloneService\";\n\n@autoinject()\nexport class App {\n  router: Router;\n  service: TwitterCloneService;\n\n  constructor(service:TwitterCloneService) {\n    this.service = service;\n  }\n\n  configureRouter(config, router:Router) {\n    config.map([\n      { route: '', name: 'header', moduleId: 'viewmodels/headeMenu/headerMenu', nav: true, title: 'Header' },\n    ]);\n\n    this.router = router;\n  }\n}\n","export default {\n  debug: true,\n  testing: true\n};\n","import {Aurelia} from 'aurelia-framework'\nimport environment from './environment';\n\n//Configure Bluebird Promises.\n//Note: You may want to use environment-specific configuration.\n(<any>Promise).config({\n  warnings: {\n    wForgottenReturn: false\n  }\n});\n\nexport function configure(aurelia: Aurelia) {\n  aurelia.use\n    .standardConfiguration()\n    .feature('resources');\n\n  if (environment.debug) {\n    aurelia.use.developmentLogging();\n  }\n\n  if (environment.testing) {\n    aurelia.use.plugin('aurelia-testing');\n  }\n\n  aurelia.start().then(() => aurelia.setRoot());\n}\n","import {FrameworkConfiguration} from 'aurelia-framework';\n\nexport function configure(config: FrameworkConfiguration) {\n  //config.globalResources([]);\n}\n","import {autoinject} from \"aurelia-framework\";\nimport {TwitterCloneService} from \"../../services/twitterCloneService\";\nimport {User} from \"../../services/user\";\n\n@autoinject()\nexport class HeaderMenu {\n  service: TwitterCloneService;\n\n  loggedIn: boolean;\n  currentUser: User;\n\n  constructor(service:TwitterCloneService) {\n    this.service = service;\n  }\n\n  attached() {\n    this.currentUser = this.service.currentUser;\n    this.loggedIn = this.service.isAuthenticated();\n\n    runJquery();\n  }\n}\n",null,null,null,null],"sourceRoot":"../src"}