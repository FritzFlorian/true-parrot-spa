{"version":3,"sources":["services/twitterCloneService.ts","app.ts","environment.ts","main.ts","resources/index.ts","viewmodels/headerMenu/headerMenu.ts","/Users/florianfritz/Documents/projects/nodejs/twitter-clone-spa/src/app.html","/Users/florianfritz/Documents/projects/nodejs/twitter-clone-spa/src/viewmodels/headerMenu/headerMenu.html"],"names":[],"mappings":";;IAAA;QAAA;QAIA,CAAC;QAHC,6CAAe,GAAf;YACE,MAAM,CAAC,IAAI,CAAC;QACd,CAAC;QACH,0BAAC;IAAD,CAJA,AAIC,IAAA;IAJY,2BAAmB,sBAI/B,CAAA;;;;;;;;;;;;;;ICCD;QAIE,aAAY,OAA2B;YACrC,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACzB,CAAC;QAED,6BAAe,GAAf,UAAgB,MAAM,EAAE,MAAa;YACnC,MAAM,CAAC,GAAG,CAAC;gBACT,EAAE,KAAK,EAAE,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE,QAAQ,EAAE,iCAAiC,EAAE,GAAG,EAAE,IAAI,EAAE,KAAK,EAAE,QAAQ,EAAE;aACvG,CAAC,CAAC;YAEH,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACvB,CAAC;QAfH;YAAC,8BAAU,EAAE;;eAAA;QAgBb,UAAC;IAAD,CAfA,AAeC,IAAA;IAfY,WAAG,MAef,CAAA;;;;;ICpBD;sBAAe;QACb,KAAK,EAAE,IAAI;QACX,OAAO,EAAE,IAAI;KACd,CAAC;;;;;ICEI,OAAQ,CAAC,MAAM,CAAC;QACpB,QAAQ,EAAE;YACR,gBAAgB,EAAE,KAAK;SACxB;KACF,CAAC,CAAC;IAEH,mBAA0B,OAAgB;QACxC,OAAO,CAAC,GAAG;aACR,qBAAqB,EAAE;aACvB,OAAO,CAAC,WAAW,CAAC,CAAC;QAExB,EAAE,CAAC,CAAC,qBAAW,CAAC,KAAK,CAAC,CAAC,CAAC;YACtB,OAAO,CAAC,GAAG,CAAC,kBAAkB,EAAE,CAAC;QACnC,CAAC;QAED,EAAE,CAAC,CAAC,qBAAW,CAAC,OAAO,CAAC,CAAC,CAAC;YACxB,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,iBAAiB,CAAC,CAAC;QACxC,CAAC;QAED,OAAO,CAAC,KAAK,EAAE,CAAC,IAAI,CAAC,cAAM,OAAA,OAAO,CAAC,OAAO,EAAE,EAAjB,CAAiB,CAAC,CAAC;IAChD,CAAC;IAde,iBAAS,YAcxB,CAAA;;;;;ICvBD,mBAA0B,MAA8B;IAExD,CAAC;IAFe,iBAAS,YAExB,CAAA;;;;;;;;;;;;;;ICAD;QAIE,oBAAY,OAA2B;YACrC,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACzB,CAAC;QAED,6BAAQ,GAAR;YACE,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,OAAO,CAAC,eAAe,EAAE,CAAC;QACjD,CAAC;QAXH;YAAC,8BAAU,EAAE;;sBAAA;QAYb,iBAAC;IAAD,CAXA,AAWC,IAAA;IAXY,kBAAU,aAWtB,CAAA;;;ACfD;ACAA","file":"app-bundle.js","sourcesContent":["export class TwitterCloneService {\n  isAuthenticated(): boolean {\n    return true;\n  }\n}\n","import {autoinject} from \"aurelia-framework\";\nimport {Router} from \"aurelia-router\";\nimport {TwitterCloneService} from \"./services/twitterCloneService\";\n\n@autoinject()\nexport class App {\n  router: Router;\n  service: TwitterCloneService;\n\n  constructor(service:TwitterCloneService) {\n    this.service = service;\n  }\n\n  configureRouter(config, router:Router) {\n    config.map([\n      { route: '', name: 'header', moduleId: 'viewmodels/headeMenu/headerMenu', nav: true, title: 'Header' },\n    ]);\n\n    this.router = router;\n  }\n}\n","export default {\n  debug: true,\n  testing: true\n};\n","import {Aurelia} from 'aurelia-framework'\nimport environment from './environment';\n\n//Configure Bluebird Promises.\n//Note: You may want to use environment-specific configuration.\n(<any>Promise).config({\n  warnings: {\n    wForgottenReturn: false\n  }\n});\n\nexport function configure(aurelia: Aurelia) {\n  aurelia.use\n    .standardConfiguration()\n    .feature('resources');\n\n  if (environment.debug) {\n    aurelia.use.developmentLogging();\n  }\n\n  if (environment.testing) {\n    aurelia.use.plugin('aurelia-testing');\n  }\n\n  aurelia.start().then(() => aurelia.setRoot());\n}\n","import {FrameworkConfiguration} from 'aurelia-framework';\n\nexport function configure(config: FrameworkConfiguration) {\n  //config.globalResources([]);\n}\n","import {autoinject} from \"aurelia-framework\";\nimport {TwitterCloneService} from \"../../services/twitterCloneService\";\n\n@autoinject()\nexport class HeaderMenu {\n  service: TwitterCloneService;\n  loggedIn: boolean;\n\n  constructor(service:TwitterCloneService) {\n    this.service = service;\n  }\n\n  attached() {\n    this.loggedIn = this.service.isAuthenticated();\n  }\n}\n",null,null],"sourceRoot":"../src"}